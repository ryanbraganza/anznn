- field_id = "question_#{q.id}"
- answer = @question_id_to_answers[q.id]

- classes = ['clearfix']
- classes << 'warning' if answer.warnings.any?
- classes << 'fatalwarning' if answer.fatal_warnings.any? || (@flag_mandatory && answer.violates_mandatory)
- classes << 'hiddenmulti' if q.multiple && @group_info[q.multi_name].hide_group?(q)

- show_add_link = q.multiple && @group_info[q.multi_name].show_add_link?(q)

- data = {description: prep_help(q.description), guide: prep_help(q.guide_for_use), name: q.question, code: q.code}

- if q.multiple
  - div_data = { multi_name: q.multi_name, group_number: q.group_number }
- else
  - div_data = {}

%div{id: "container_#{q.id}", class: classes, data: div_data}
  = label_tag field_id, class: 'field_trigger', data: data do
    = q.question
    %span.infoicon

  .input
    - case q.question_type
      - when 'Text'
        = text_field_tag "answers[#{q.id}]", answer.answer_value, id: field_id, maxlength: 255,
          class: 'xxlarge field_trigger',
          data: data
      - when 'Date'
        - day = answer.answer_value ? answer.answer_value.day : nil
        - month = answer.answer_value ? answer.answer_value.month : nil
        - year = answer.answer_value ? answer.answer_value.year : nil
        = select_day(day, {field_name: "#{q.id}][day", prompt: true, prefix: "answers"},
          class: "small field_trigger",
          data: data)
        = select_month(month, {field_name: "#{q.id}][month", prompt: true, prefix: "answers", use_month_numbers: true},
          class: "small field_trigger",
          data: data)
        = select_year(year, {field_name: "#{q.id}][year", prompt: true, prefix: "answers", :start_year => (year_of_registration_range.first - 2), :end_year => (year_of_registration_range.last + 2)},
          class: "small field_trigger",
          data: data)
      - when 'Time'
        - hour = answer.answer_value ? answer.answer_value.hour : nil
        - min = answer.answer_value ? answer.answer_value.min : nil
        = select_hour(hour, {field_name: "#{q.id}][hour", prompt: true, prefix: "answers"},
          class: "small field_trigger",
          data: data)
        = select_minute(min, {field_name: "#{q.id}][min", prompt: true, prefix: "answers"},
          class: "small field_trigger",
          data: data)
      - when 'Choice'
        %ul.inputs-list
          - q.question_options.each do |qo|
            %li
              %label{for: "radio_#{q.id}_#{qo.id}"}
                = radio_button_tag "answers[#{q.id}]", qo.option_value, (answer.answer_value == qo.option_value),
                  class: 'field_trigger',
                  data: data,
                  id: "radio_#{q.id}_#{qo.id}"
                %span.radio-label= qo.display_value
                - unless qo.hint_text.blank?
                  %span.help-block.radio-description= qo.hint_text
      - when 'Decimal'
        = text_field_tag "answers[#{q.id}]", answer.answer_value, id: field_id, maxlength: 15,
          class: 'medium field_trigger',
          data: data
      - when 'Integer'
        = text_field_tag "answers[#{q.id}]", answer.answer_value, id: field_id, maxlength: 15,
          class: 'medium field_trigger',
          data: data
      - else
        - raise 'Question type not recognised!'
    %span.help-block
      - if answer.has_warning?
        - answer.fatal_warnings.each do |warning|
          %span.fatalerror-display= warning
          %br/
        - answer.warnings.each do |warning|
          %span.warning-display= warning
          %br/
      - elsif @flag_mandatory and answer.violates_mandatory
        %span.fatalerror-display This question is mandatory
      - else
        = HelpTextGenerator.new(q).help_text
  - if show_add_link
    = link_to "Add another #{q.multi_name}", '', {class: 'add_multi_link'}